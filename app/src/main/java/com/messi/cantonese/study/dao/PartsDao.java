package com.messi.cantonese.study.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table PARTS.
*/
public class PartsDao extends AbstractDao<Parts, Long> {

    public static final String TABLENAME = "PARTS";

    /**
     * Properties of entity Parts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Part = new Property(1, String.class, "part", false, "PART");
        public final static Property DictionaryId = new Property(2, Long.class, "dictionaryId", false, "DICTIONARY_ID");
    };

    private DaoSession daoSession;

    private Query<Parts> dictionary_PartListQuery;

    public PartsDao(DaoConfig config) {
        super(config);
    }
    
    public PartsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PARTS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'PART' TEXT," + // 1: part
                "'DICTIONARY_ID' INTEGER);"); // 2: dictionaryId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PARTS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Parts entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String part = entity.getPart();
        if (part != null) {
            stmt.bindString(2, part);
        }
 
        Long dictionaryId = entity.getDictionaryId();
        if (dictionaryId != null) {
            stmt.bindLong(3, dictionaryId);
        }
    }

    @Override
    protected void attachEntity(Parts entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Parts readEntity(Cursor cursor, int offset) {
        Parts entity = new Parts( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // part
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // dictionaryId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Parts entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPart(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDictionaryId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Parts entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Parts entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "partList" to-many relationship of Dictionary. */
    public List<Parts> _queryDictionary_PartList(Long dictionaryId) {
        synchronized (this) {
            if (dictionary_PartListQuery == null) {
                QueryBuilder<Parts> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DictionaryId.eq(null));
                dictionary_PartListQuery = queryBuilder.build();
            }
        }
        Query<Parts> query = dictionary_PartListQuery.forCurrentThread();
        query.setParameter(0, dictionaryId);
        return query.list();
    }

}
