package com.messi.cantonese.study.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SYMBOL_LIST_DAO".
*/
public class SymbolListDaoDao extends AbstractDao<SymbolListDao, Long> {

    public static final String TABLENAME = "SYMBOL_LIST_DAO";

    /**
     * Properties of entity SymbolListDao.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SDName = new Property(1, String.class, "SDName", false, "SDNAME");
        public final static Property SDCode = new Property(2, String.class, "SDCode", false, "SDCODE");
        public final static Property SDDes = new Property(3, String.class, "SDDes", false, "SDDES");
        public final static Property SDInfo = new Property(4, String.class, "SDInfo", false, "SDINFO");
        public final static Property SDAudioMp3Url = new Property(5, String.class, "SDAudioMp3Url", false, "SDAUDIO_MP3_URL");
        public final static Property SDTeacherMp3Url = new Property(6, String.class, "SDTeacherMp3Url", false, "SDTEACHER_MP3_URL");
        public final static Property SDAudioMp3FilePath = new Property(7, String.class, "SDAudioMp3FilePath", false, "SDAUDIO_MP3_FILE_PATH");
        public final static Property SDTeacherMp3FilePath = new Property(8, String.class, "SDTeacherMp3FilePath", false, "SDTEACHER_MP3_FILE_PATH");
        public final static Property Backup1 = new Property(9, String.class, "backup1", false, "BACKUP1");
        public final static Property Backup2 = new Property(10, String.class, "backup2", false, "BACKUP2");
        public final static Property Backup3 = new Property(11, String.class, "backup3", false, "BACKUP3");
    };


    public SymbolListDaoDao(DaoConfig config) {
        super(config);
    }
    
    public SymbolListDaoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYMBOL_LIST_DAO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SDNAME\" TEXT," + // 1: SDName
                "\"SDCODE\" TEXT," + // 2: SDCode
                "\"SDDES\" TEXT," + // 3: SDDes
                "\"SDINFO\" TEXT," + // 4: SDInfo
                "\"SDAUDIO_MP3_URL\" TEXT," + // 5: SDAudioMp3Url
                "\"SDTEACHER_MP3_URL\" TEXT," + // 6: SDTeacherMp3Url
                "\"SDAUDIO_MP3_FILE_PATH\" TEXT," + // 7: SDAudioMp3FilePath
                "\"SDTEACHER_MP3_FILE_PATH\" TEXT," + // 8: SDTeacherMp3FilePath
                "\"BACKUP1\" TEXT," + // 9: backup1
                "\"BACKUP2\" TEXT," + // 10: backup2
                "\"BACKUP3\" TEXT);"); // 11: backup3
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYMBOL_LIST_DAO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SymbolListDao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String SDName = entity.getSDName();
        if (SDName != null) {
            stmt.bindString(2, SDName);
        }
 
        String SDCode = entity.getSDCode();
        if (SDCode != null) {
            stmt.bindString(3, SDCode);
        }
 
        String SDDes = entity.getSDDes();
        if (SDDes != null) {
            stmt.bindString(4, SDDes);
        }
 
        String SDInfo = entity.getSDInfo();
        if (SDInfo != null) {
            stmt.bindString(5, SDInfo);
        }
 
        String SDAudioMp3Url = entity.getSDAudioMp3Url();
        if (SDAudioMp3Url != null) {
            stmt.bindString(6, SDAudioMp3Url);
        }
 
        String SDTeacherMp3Url = entity.getSDTeacherMp3Url();
        if (SDTeacherMp3Url != null) {
            stmt.bindString(7, SDTeacherMp3Url);
        }
 
        String SDAudioMp3FilePath = entity.getSDAudioMp3FilePath();
        if (SDAudioMp3FilePath != null) {
            stmt.bindString(8, SDAudioMp3FilePath);
        }
 
        String SDTeacherMp3FilePath = entity.getSDTeacherMp3FilePath();
        if (SDTeacherMp3FilePath != null) {
            stmt.bindString(9, SDTeacherMp3FilePath);
        }
 
        String backup1 = entity.getBackup1();
        if (backup1 != null) {
            stmt.bindString(10, backup1);
        }
 
        String backup2 = entity.getBackup2();
        if (backup2 != null) {
            stmt.bindString(11, backup2);
        }
 
        String backup3 = entity.getBackup3();
        if (backup3 != null) {
            stmt.bindString(12, backup3);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SymbolListDao readEntity(Cursor cursor, int offset) {
        SymbolListDao entity = new SymbolListDao( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // SDName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SDCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SDDes
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SDInfo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SDAudioMp3Url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // SDTeacherMp3Url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SDAudioMp3FilePath
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // SDTeacherMp3FilePath
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // backup1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // backup2
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // backup3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SymbolListDao entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSDName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSDCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSDDes(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSDInfo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSDAudioMp3Url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSDTeacherMp3Url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSDAudioMp3FilePath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSDTeacherMp3FilePath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBackup1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBackup2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBackup3(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SymbolListDao entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SymbolListDao entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
