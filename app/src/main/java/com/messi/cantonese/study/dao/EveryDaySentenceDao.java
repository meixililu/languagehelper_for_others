package com.messi.cantonese.study.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table EVERY_DAY_SENTENCE.
*/
public class EveryDaySentenceDao extends AbstractDao<EveryDaySentence, Long> {

    public static final String TABLENAME = "EVERY_DAY_SENTENCE";

    /**
     * Properties of entity EveryDaySentence.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cid = new Property(1, Long.class, "cid", false, "CID");
        public final static Property Sid = new Property(2, String.class, "sid", false, "SID");
        public final static Property Tts = new Property(3, String.class, "tts", false, "TTS");
        public final static Property Tts_local_position = new Property(4, String.class, "tts_local_position", false, "TTS_LOCAL_POSITION");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property Note = new Property(6, String.class, "note", false, "NOTE");
        public final static Property Love = new Property(7, String.class, "love", false, "LOVE");
        public final static Property Translation = new Property(8, String.class, "translation", false, "TRANSLATION");
        public final static Property Picture = new Property(9, String.class, "picture", false, "PICTURE");
        public final static Property Picture2 = new Property(10, String.class, "picture2", false, "PICTURE2");
        public final static Property Caption = new Property(11, String.class, "caption", false, "CAPTION");
        public final static Property Dateline = new Property(12, String.class, "dateline", false, "DATELINE");
        public final static Property S_pv = new Property(13, String.class, "s_pv", false, "S_PV");
        public final static Property Sp_pv = new Property(14, String.class, "sp_pv", false, "SP_PV");
        public final static Property Fenxiang_img = new Property(15, String.class, "fenxiang_img", false, "FENXIANG_IMG");
        public final static Property Fenxiang_img_local_position = new Property(16, String.class, "fenxiang_img_local_position", false, "FENXIANG_IMG_LOCAL_POSITION");
        public final static Property Backup1 = new Property(17, String.class, "backup1", false, "BACKUP1");
        public final static Property Backup2 = new Property(18, String.class, "backup2", false, "BACKUP2");
        public final static Property Backup3 = new Property(19, String.class, "backup3", false, "BACKUP3");
    };

    private DaoSession daoSession;


    public EveryDaySentenceDao(DaoConfig config) {
        super(config);
    }
    
    public EveryDaySentenceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EVERY_DAY_SENTENCE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CID' INTEGER," + // 1: cid
                "'SID' TEXT," + // 2: sid
                "'TTS' TEXT," + // 3: tts
                "'TTS_LOCAL_POSITION' TEXT," + // 4: tts_local_position
                "'CONTENT' TEXT," + // 5: content
                "'NOTE' TEXT," + // 6: note
                "'LOVE' TEXT," + // 7: love
                "'TRANSLATION' TEXT," + // 8: translation
                "'PICTURE' TEXT," + // 9: picture
                "'PICTURE2' TEXT," + // 10: picture2
                "'CAPTION' TEXT," + // 11: caption
                "'DATELINE' TEXT," + // 12: dateline
                "'S_PV' TEXT," + // 13: s_pv
                "'SP_PV' TEXT," + // 14: sp_pv
                "'FENXIANG_IMG' TEXT," + // 15: fenxiang_img
                "'FENXIANG_IMG_LOCAL_POSITION' TEXT," + // 16: fenxiang_img_local_position
                "'BACKUP1' TEXT," + // 17: backup1
                "'BACKUP2' TEXT," + // 18: backup2
                "'BACKUP3' TEXT);"); // 19: backup3
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EVERY_DAY_SENTENCE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EveryDaySentence entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(2, cid);
        }
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(3, sid);
        }
 
        String tts = entity.getTts();
        if (tts != null) {
            stmt.bindString(4, tts);
        }
 
        String tts_local_position = entity.getTts_local_position();
        if (tts_local_position != null) {
            stmt.bindString(5, tts_local_position);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(7, note);
        }
 
        String love = entity.getLove();
        if (love != null) {
            stmt.bindString(8, love);
        }
 
        String translation = entity.getTranslation();
        if (translation != null) {
            stmt.bindString(9, translation);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(10, picture);
        }
 
        String picture2 = entity.getPicture2();
        if (picture2 != null) {
            stmt.bindString(11, picture2);
        }
 
        String caption = entity.getCaption();
        if (caption != null) {
            stmt.bindString(12, caption);
        }
 
        String dateline = entity.getDateline();
        if (dateline != null) {
            stmt.bindString(13, dateline);
        }
 
        String s_pv = entity.getS_pv();
        if (s_pv != null) {
            stmt.bindString(14, s_pv);
        }
 
        String sp_pv = entity.getSp_pv();
        if (sp_pv != null) {
            stmt.bindString(15, sp_pv);
        }
 
        String fenxiang_img = entity.getFenxiang_img();
        if (fenxiang_img != null) {
            stmt.bindString(16, fenxiang_img);
        }
 
        String fenxiang_img_local_position = entity.getFenxiang_img_local_position();
        if (fenxiang_img_local_position != null) {
            stmt.bindString(17, fenxiang_img_local_position);
        }
 
        String backup1 = entity.getBackup1();
        if (backup1 != null) {
            stmt.bindString(18, backup1);
        }
 
        String backup2 = entity.getBackup2();
        if (backup2 != null) {
            stmt.bindString(19, backup2);
        }
 
        String backup3 = entity.getBackup3();
        if (backup3 != null) {
            stmt.bindString(20, backup3);
        }
    }

    @Override
    protected void attachEntity(EveryDaySentence entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EveryDaySentence readEntity(Cursor cursor, int offset) {
        EveryDaySentence entity = new EveryDaySentence( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // cid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tts
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tts_local_position
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // note
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // love
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // translation
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // picture
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // picture2
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // caption
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // dateline
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // s_pv
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sp_pv
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // fenxiang_img
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // fenxiang_img_local_position
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // backup1
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // backup2
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // backup3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EveryDaySentence entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTts(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTts_local_position(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNote(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLove(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTranslation(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPicture(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPicture2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCaption(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDateline(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setS_pv(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSp_pv(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFenxiang_img(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFenxiang_img_local_position(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBackup1(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBackup2(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBackup3(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EveryDaySentence entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EveryDaySentence entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
