package com.messi.cantonese.study.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table ROLE.
*/
public class RoleDao extends AbstractDao<Role, Long> {

    public static final String TABLENAME = "ROLE";

    /**
     * Properties of entity Role.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RoleEn = new Property(1, String.class, "roleEn", false, "ROLE_EN");
        public final static Property RoleCh = new Property(2, String.class, "roleCh", false, "ROLE_CH");
        public final static Property RoleId = new Property(3, String.class, "roleId", false, "ROLE_ID");
        public final static Property RolePath = new Property(4, String.class, "rolePath", false, "ROLE_PATH");
        public final static Property IsShow = new Property(5, String.class, "isShow", false, "IS_SHOW");
        public final static Property UserSpeak = new Property(6, String.class, "userSpeak", false, "USER_SPEAK");
        public final static Property UserSpeakId = new Property(7, String.class, "userSpeakId", false, "USER_SPEAK_ID");
        public final static Property UserSpeakPath = new Property(8, String.class, "userSpeakPath", false, "USER_SPEAK_PATH");
        public final static Property Score = new Property(9, String.class, "score", false, "SCORE");
        public final static Property Type = new Property(10, String.class, "type", false, "TYPE");
        public final static Property Backup1 = new Property(11, String.class, "backup1", false, "BACKUP1");
        public final static Property DialogId = new Property(12, Long.class, "dialogId", false, "DIALOG_ID");
    };

    private Query<Role> dialogDao_RoleListQuery;

    public RoleDao(DaoConfig config) {
        super(config);
    }
    
    public RoleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ROLE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ROLE_EN' TEXT," + // 1: roleEn
                "'ROLE_CH' TEXT," + // 2: roleCh
                "'ROLE_ID' TEXT," + // 3: roleId
                "'ROLE_PATH' TEXT," + // 4: rolePath
                "'IS_SHOW' TEXT," + // 5: isShow
                "'USER_SPEAK' TEXT," + // 6: userSpeak
                "'USER_SPEAK_ID' TEXT," + // 7: userSpeakId
                "'USER_SPEAK_PATH' TEXT," + // 8: userSpeakPath
                "'SCORE' TEXT," + // 9: score
                "'TYPE' TEXT," + // 10: type
                "'BACKUP1' TEXT," + // 11: backup1
                "'DIALOG_ID' INTEGER);"); // 12: dialogId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ROLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Role entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String roleEn = entity.getRoleEn();
        if (roleEn != null) {
            stmt.bindString(2, roleEn);
        }
 
        String roleCh = entity.getRoleCh();
        if (roleCh != null) {
            stmt.bindString(3, roleCh);
        }
 
        String roleId = entity.getRoleId();
        if (roleId != null) {
            stmt.bindString(4, roleId);
        }
 
        String rolePath = entity.getRolePath();
        if (rolePath != null) {
            stmt.bindString(5, rolePath);
        }
 
        String isShow = entity.getIsShow();
        if (isShow != null) {
            stmt.bindString(6, isShow);
        }
 
        String userSpeak = entity.getUserSpeak();
        if (userSpeak != null) {
            stmt.bindString(7, userSpeak);
        }
 
        String userSpeakId = entity.getUserSpeakId();
        if (userSpeakId != null) {
            stmt.bindString(8, userSpeakId);
        }
 
        String userSpeakPath = entity.getUserSpeakPath();
        if (userSpeakPath != null) {
            stmt.bindString(9, userSpeakPath);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(10, score);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(11, type);
        }
 
        String backup1 = entity.getBackup1();
        if (backup1 != null) {
            stmt.bindString(12, backup1);
        }
 
        Long dialogId = entity.getDialogId();
        if (dialogId != null) {
            stmt.bindLong(13, dialogId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Role readEntity(Cursor cursor, int offset) {
        Role entity = new Role( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // roleEn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // roleCh
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // roleId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rolePath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // isShow
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userSpeak
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userSpeakId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userSpeakPath
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // score
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // type
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // backup1
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12) // dialogId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Role entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRoleEn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRoleCh(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRoleId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRolePath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsShow(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserSpeak(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserSpeakId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserSpeakPath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setScore(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBackup1(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDialogId(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Role entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Role entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "roleList" to-many relationship of DialogDao. */
    public List<Role> _queryDialogDao_RoleList(Long dialogId) {
        synchronized (this) {
            if (dialogDao_RoleListQuery == null) {
                QueryBuilder<Role> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DialogId.eq(null));
                dialogDao_RoleListQuery = queryBuilder.build();
            }
        }
        Query<Role> query = dialogDao_RoleListQuery.forCurrentThread();
        query.setParameter(0, dialogId);
        return query.list();
    }

}
