package com.messi.cantonese.study.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table DIALOG_DAO.
*/
public class DialogDaoDao extends AbstractDao<DialogDao, Long> {

    public static final String TABLENAME = "DIALOG_DAO";

    /**
     * Properties of entity DialogDao.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Did = new Property(1, String.class, "did", false, "DID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Visit_times = new Property(3, Integer.class, "visit_times", false, "VISIT_TIMES");
        public final static Property Speak_speed = new Property(4, Integer.class, "speak_speed", false, "SPEAK_SPEED");
        public final static Property Score = new Property(5, String.class, "score", false, "SCORE");
        public final static Property Iscollected = new Property(6, String.class, "iscollected", false, "ISCOLLECTED");
        public final static Property Backup1 = new Property(7, String.class, "backup1", false, "BACKUP1");
        public final static Property Backup2 = new Property(8, String.class, "backup2", false, "BACKUP2");
        public final static Property Backup3 = new Property(9, String.class, "backup3", false, "BACKUP3");
    };

    private DaoSession daoSession;


    public DialogDaoDao(DaoConfig config) {
        super(config);
    }
    
    public DialogDaoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DIALOG_DAO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DID' TEXT," + // 1: did
                "'TYPE' TEXT," + // 2: type
                "'VISIT_TIMES' INTEGER," + // 3: visit_times
                "'SPEAK_SPEED' INTEGER," + // 4: speak_speed
                "'SCORE' TEXT," + // 5: score
                "'ISCOLLECTED' TEXT," + // 6: iscollected
                "'BACKUP1' TEXT," + // 7: backup1
                "'BACKUP2' TEXT," + // 8: backup2
                "'BACKUP3' TEXT);"); // 9: backup3
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DIALOG_DAO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DialogDao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String did = entity.getDid();
        if (did != null) {
            stmt.bindString(2, did);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        Integer visit_times = entity.getVisit_times();
        if (visit_times != null) {
            stmt.bindLong(4, visit_times);
        }
 
        Integer speak_speed = entity.getSpeak_speed();
        if (speak_speed != null) {
            stmt.bindLong(5, speak_speed);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(6, score);
        }
 
        String iscollected = entity.getIscollected();
        if (iscollected != null) {
            stmt.bindString(7, iscollected);
        }
 
        String backup1 = entity.getBackup1();
        if (backup1 != null) {
            stmt.bindString(8, backup1);
        }
 
        String backup2 = entity.getBackup2();
        if (backup2 != null) {
            stmt.bindString(9, backup2);
        }
 
        String backup3 = entity.getBackup3();
        if (backup3 != null) {
            stmt.bindString(10, backup3);
        }
    }

    @Override
    protected void attachEntity(DialogDao entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DialogDao readEntity(Cursor cursor, int offset) {
        DialogDao entity = new DialogDao( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // did
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // visit_times
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // speak_speed
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // score
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // iscollected
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // backup1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // backup2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // backup3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DialogDao entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVisit_times(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSpeak_speed(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setScore(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIscollected(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBackup1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBackup2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBackup3(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DialogDao entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DialogDao entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
