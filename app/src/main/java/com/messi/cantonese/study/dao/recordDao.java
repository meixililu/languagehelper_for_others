package com.messi.cantonese.study.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table RECORD.
*/
public class recordDao extends AbstractDao<record, Long> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity record.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property English = new Property(1, String.class, "english", false, "ENGLISH");
        public final static Property Chinese = new Property(2, String.class, "chinese", false, "CHINESE");
        public final static Property ResultAudioPath = new Property(3, String.class, "resultAudioPath", false, "RESULT_AUDIO_PATH");
        public final static Property QuestionAudioPath = new Property(4, String.class, "questionAudioPath", false, "QUESTION_AUDIO_PATH");
        public final static Property QuestionVoiceId = new Property(5, String.class, "questionVoiceId", false, "QUESTION_VOICE_ID");
        public final static Property ResultVoiceId = new Property(6, String.class, "resultVoiceId", false, "RESULT_VOICE_ID");
        public final static Property Iscollected = new Property(7, String.class, "iscollected", false, "ISCOLLECTED");
        public final static Property Visit_times = new Property(8, Integer.class, "visit_times", false, "VISIT_TIMES");
        public final static Property Speak_speed = new Property(9, Integer.class, "speak_speed", false, "SPEAK_SPEED");
        public final static Property Backup1 = new Property(10, String.class, "backup1", false, "BACKUP1");
        public final static Property Backup2 = new Property(11, String.class, "backup2", false, "BACKUP2");
        public final static Property Backup3 = new Property(12, String.class, "backup3", false, "BACKUP3");
    };


    public recordDao(DaoConfig config) {
        super(config);
    }
    
    public recordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RECORD' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ENGLISH' TEXT," + // 1: english
                "'CHINESE' TEXT," + // 2: chinese
                "'RESULT_AUDIO_PATH' TEXT," + // 3: resultAudioPath
                "'QUESTION_AUDIO_PATH' TEXT," + // 4: questionAudioPath
                "'QUESTION_VOICE_ID' TEXT," + // 5: questionVoiceId
                "'RESULT_VOICE_ID' TEXT," + // 6: resultVoiceId
                "'ISCOLLECTED' TEXT," + // 7: iscollected
                "'VISIT_TIMES' INTEGER," + // 8: visit_times
                "'SPEAK_SPEED' INTEGER," + // 9: speak_speed
                "'BACKUP1' TEXT," + // 10: backup1
                "'BACKUP2' TEXT," + // 11: backup2
                "'BACKUP3' TEXT);"); // 12: backup3
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, record entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String english = entity.getEnglish();
        if (english != null) {
            stmt.bindString(2, english);
        }
 
        String chinese = entity.getChinese();
        if (chinese != null) {
            stmt.bindString(3, chinese);
        }
 
        String resultAudioPath = entity.getResultAudioPath();
        if (resultAudioPath != null) {
            stmt.bindString(4, resultAudioPath);
        }
 
        String questionAudioPath = entity.getQuestionAudioPath();
        if (questionAudioPath != null) {
            stmt.bindString(5, questionAudioPath);
        }
 
        String questionVoiceId = entity.getQuestionVoiceId();
        if (questionVoiceId != null) {
            stmt.bindString(6, questionVoiceId);
        }
 
        String resultVoiceId = entity.getResultVoiceId();
        if (resultVoiceId != null) {
            stmt.bindString(7, resultVoiceId);
        }
 
        String iscollected = entity.getIscollected();
        if (iscollected != null) {
            stmt.bindString(8, iscollected);
        }
 
        Integer visit_times = entity.getVisit_times();
        if (visit_times != null) {
            stmt.bindLong(9, visit_times);
        }
 
        Integer speak_speed = entity.getSpeak_speed();
        if (speak_speed != null) {
            stmt.bindLong(10, speak_speed);
        }
 
        String backup1 = entity.getBackup1();
        if (backup1 != null) {
            stmt.bindString(11, backup1);
        }
 
        String backup2 = entity.getBackup2();
        if (backup2 != null) {
            stmt.bindString(12, backup2);
        }
 
        String backup3 = entity.getBackup3();
        if (backup3 != null) {
            stmt.bindString(13, backup3);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public record readEntity(Cursor cursor, int offset) {
        record entity = new record( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // english
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chinese
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // resultAudioPath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // questionAudioPath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // questionVoiceId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // resultVoiceId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // iscollected
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // visit_times
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // speak_speed
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // backup1
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // backup2
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // backup3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, record entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEnglish(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChinese(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setResultAudioPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQuestionAudioPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQuestionVoiceId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setResultVoiceId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIscollected(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVisit_times(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSpeak_speed(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setBackup1(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBackup2(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBackup3(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(record entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(record entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
